x
pp <- c(1:100)
makeVector(pp)
}
source('~/.active-rstudio-document', echo=TRUE)
cachemean(pp)
cachemean(1:10)
source('~/.active-rstudio-document', echo=TRUE)
a <- makeVector(c(5,1,3))
a$get()
a$set(c(7,4,1,2))
a$get()
source('~/ds/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
set.seed(1)
rpois(5,2)
e <- rnorm(10,0,20)
e
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6==7
6 < 7
10 <= 10
5 != 7
5 != 7
!(5==7)
FALSE & FALSE
TRUE & C(TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 >8 || 6 !=8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(>7)
which(ints>7)
any(ints < 0)
all(ints <0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function()
boring_function
submit()
submit()
mean(c(4,5,10))
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(d)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
library(xlsx)
FileName <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(FileName, destfile = "Gas.xlsx", method = "curl")
GasTable <- read.xlsx("Gas.xlsx", SheetIndex=1, header = TRUE)
GasTable <- read.xlsx("Gas.xlsx", sheetIndex=1, header = TRUE)
head(GasTable)
colIndex <- 7:15
rowIndex <- 18:23
GasTableSubset <- read.xlsx("Gas.xlsx", sheetIndex = 1, colIndex = colIndex, rowIndex = rowIndex)
head(GasTableSubset)
dat <- GasTableSubset
sum(dat$Zip*dat$Ext,na.rm=T)
install.packages("XML")
library(XML)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileURL, useInternal=TRUE)
doc <- xmlTreeParse(fileURL, useInternal=TRUE, method="curl")
doc <- xmlTreeParse(fileURL, useInternal=TRUE)
download.file(fileURL, destfile = "Baltimore.xml", method = "curl")
doc <- xmlTreeParse(Baltimore.xml, useInternal=TRUE)
doc <- xmlTreeParse("Baltimore.xml", useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
names(rootNode[[1]])
names(rootNode[1])
names(rootNode[1][1])
names(rootNode[1][1][1])
names(rootNode[[1]][[1]]
)
xpathSApply(rootNode, "//zipcode", xmlValue)
zipcodes <- xpathSApply(rootNode, "//zipcode", xmlValue)
zipcodes <- zipcodes[21231]
zipcodes.length(0)
length(zipcodes)
zipcodes
zipcodes <- xpathSApply(rootNode, "//zipcode", xmlValue)
zipcount <- zipcodes == 21231
zipcount
zipcodes <- zipcodes[TRUE]
zipcodes
zipcount <- zipcodes == 21231
zipcount
zipcodes[TRUE]
zipcount[TRUE]
zipcodes <- subset(zipcodes, TRUE)
zipcodes
zipcodes <- subset(zipcodes, 21231)
zipcount <- zipcodes == 21231
zipcount <- subset(zipcount, TRUE)
zipcount
zipcount <- subset(zipcount, zipcount==TRUE)
zipcount
length(zipcount)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile = "Idaho2.csv", metho="curl")
DT <- fread("Idaho2.csv")
install.packages("data.table")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile = "Idaho2.csv", method ="curl")
file <- tempfile()
write.table("Idaho2.csv", file=file)
fread(file)
library(data.table)
fread(file)
myCSV <- read.csv("Idaho2.csv")
mytable <- data.frame(myCSV)
headmytable)
head(mytable)
file <- tempfile()
write.table("myytable", file=file)
fread(file)
write.table(myytable, file=file)
mytable <- data.frame(myCSV)
class(mytable)
head(mytable,3)
write.table(mytable, file=file, row.names = FALSE, col.names = TRUE, quote = FALSE)
summary(file)
fread(file)
DT <- fread(file)
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
mean(DT$pwgtp15,by=DT$SEX)
DT[,mean(pwgtp15),by=SEX]
sapply(split(DT$pwgtp15,DT$SEX),mean)
tapply(DT$pwgtp15,DT$SEX,mean)
install.packages("RMySQL")
install.packages(sqldf)
install.packages("sqldf")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile = "AmericanCom.csv", method = "curl")
AmericanCom <- read.csv("AmericanCom.csv")
AmericanCom <- data.table(AmericanCom)
class(AmericanCom)
AmericanCom <- read.csv("AmericanCom.csv")
AmericanCom <- data.frame("AmericanCom.csv")
class(AmericanCom)
acs <- AmericanCom
sqldf("select pwgtp1 from acs where AGEP < 50")
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
head(sca)
head(acs)
acs <- data.frame("AmericanCom.csv")
head(acs)
acs <- read.csv("AmericanCom.csv")
acs <- data.frame(acs)
head(acs)
sqldf("select pwgtp1 from acs where AGEP < 50")
head(sqldf("select pwgtp1 from acs where AGEP < 50"))
sqldf("select * from acs where AGEP < 50 and pwgtp1")
head(sqldf("select * from acs where AGEP < 50 and pwgtp1"))
unique(acs$AGEP)
unique
help("unique")
sqldf("select AGEP where unique from acs")
sqldf("select distinct AGEP from acs")
sqldf("select unique AGEP from acs")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
library(XML)
fileURL <- "http://biostat.jhsph.edu/~jleek/contact.htm"
doc <- xmlTreeParse(fileURL, useInternal=TRUE)
fileURL <- "http://biostat.jhsph.edu/~jleek/contact.html"
doc <- xmlTreeParse(fileURL, useInternal=TRUE)
class(doc)
class(fileURL)
doc
doc <_ htmlTreeParse(fileURL, useInternal=TRUE)
doc <- htmlTreeParse(fileURL, useInternal=TRUE)
xmlSApply(doc, xmlValue)
head(doc)
class(doc)
doc[[1]]
xmlSApply(doc,"//title" xmlValue)
xmlSApply(doc,"//title", xmlValue)
install.packages(httr)
install.packages("httr")
library(httr)
html2 = GET("http://biostat.jhsph.edu/~jleek/contact.html")
content2 = content(html2, as="text")
parsedHtml = htmlParse(content2, asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
xpathSApply(parsedHtml, xmlValue)
head(parsedHtml)
class(parsedHtml)
parsedHtml[[1]]
nrows(parsedHtml)
nrow(parsedHtml)
parsedHtml[1]
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode  = readLines(con)
close(con)
htmlCode
nchar(htmlCode(c(10,20,30,100)))
nchar(htmlCode)
nchar(htmlCode[2])
nchar(htmlCode[10,20,30])
nchar(htmlCode[c(10,20)])
nchar(htmlCode[c(10,20,30,100)])
Still33Life
myapp = oauth_app("github", key="d59461a737ac16eb8915", secret = "ddf13175ac56968231b3c209bc60eade8962b4c9")
sig = sign_oauth1.0(myapp, token = "kathrynlhegarty@gmail.com", token_secret = "Twtstsfwic33")
homeTL = GET("https://api.github.com/users/jtleek/repos",sig)
oauth_endpoints("github")
myapp = oauth_app("github", key="d59461a737ac16eb8915", secret = "ddf13175ac56968231b3c209bc60eade8962b4c9")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp) gtoken <- config(token = github_token)
github_token <- oauth2.0_token(oauth_endpoints("github")
, myapp)
install.packages("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github")
, myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
req
content(req)
stop_for_status(req)
req
json1 = content(req)
json1
json2 = jsonlite::fromJSON(toJSON(json1))
install.packages(c("RJSONIO", "jsonlite"))
json2 = jsonlite::fromJSON(toJSON(json1))
library()
library("RJSONIO")
library("jsonlite")
json2 = jsonlite::fromJSON(toJSON(json1))
json2
head(json2)
x <- read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
head(x)
x[1]
x[4]
sum(x[4])
jullian(1986-04-11)
julian(1986-04-11)
as.date(1986-4-11)
setwd("~/ds/m5w2")
rawdata <- read.csv("activity.csv")
str(rawdata)
head(rawdata)
tail(rawdata)
class(rawdata$date
)
library(dplyr)
library(ggplot2)
meanfunc <- function(rawdata)
{return(data.frame(Mean = mean(rawdata$steps)))}
means <- ddply(rawdata, .(date), meanfunc)
require(plyr)
meanfunc <- function(rawdata)
{return(data.frame(Mean = mean(rawdata$steps)))}
means <- ddply(rawdata, .(date), meanfunc)
means
meanfunc <- function(rawdata){
return(data.frame(Mean = mean(rawdata$steps), na.rm=TRUE))
}
means <- ddply(rawdata, .(date), meanfunc)
means
```{r}
meanfunc <- function(rawdata){
return(data.frame(Mean = mean(rawdata$steps, na.rm = TRUE)))
}
means <- ddply(rawdata, .(date), meanfunc)
means
filter(rawdata, date="2012-11-30")
filter(rawdata, date=="2012-11-30")
filter(rawdata, date=="2012-11-14")
meanfunc <- function(rawdata){
return(data.frame(Mean = mean(rawdata$steps, na.rm = TRUE)))
}
means <- ddply(rawdata, .(date), Meansteps = meanfunc)
head(means)
meanfunc <- function(rawdata){
return(data.frame(Mean = mean(rawdata$steps, na.rm = TRUE)))
}
means <- ddply(rawdata, .(date),meanfunc)
head(means)
hist(means$date, means$Mean)
as.date(means$date)
as.numeric(means$date)
class(means$date)
as.POSIXlt(means$date)
as.POSIXct(means$date)
means$date <- as.POSIXlt(means$date)
means
hist(means$date, means$Mean)
meanfunc <- function(rawdata){
return(data.frame(Meansteps = mean(rawdata$steps, na.rm = TRUE)))
}
means <- ddply(rawdata, .(date), meanfunc)
hist(means$date, means$Mean)
meanfunc <- function(rawdata){
return(data.frame(Meansteps = mean(rawdata$steps, na.rm = TRUE)))
}
means <- ddply(rawdata, .(date), meanfunc)
means$date <- as.POSIXlt(means$date)
hist(means$date, means$Mean)
hist(means$date, means$Meansteps)
meanfunc <- function(rawdata){
return(data.frame(Meansteps = mean(rawdata$steps, na.rm = TRUE)))
}
means <- ddply(rawdata, .(date), meanfunc)
means$date <- as.POSIXct(means$date)
hist(means$date, means$Meansteps)
qplot(date, Meansteps, data=means)
qplot(date, Meansteps, data=means, geom="histogram")
qplot(date, Meansteps, data=means, geom="histogram", stat="identity")
median(rawdata$steps, na)
median(rawdata$steps, na.rm=)
median(rawdata$steps, na.rm="TRUE")
mean(rawdata$steps, na.rm="TRUE")
tmp <- ddply(rawdata, .(date), steps)
sum(rawdata$steps)
sum(rawdata$steps, na.rm="TRUE")
sumfunc <- function(rawdata){
return(data.frame(Sumsteps = sum(rawdata$steps, na.rm = TRUE)))
}
sums <- ddply(rawdata, .(date), sumfunc)
sums
statsfunc <- function(rawdata){
return(data.frame(
Sumsteps = sum(rawdata$steps, na.rm = TRUE),
Meansteps = mean(rawdata$steps, na.rm = TRUE),
Medsteps = median(rawdata$steps, na.rm=TRUE)))
}
sumstats <- ddply(rawdata, .(date), statsfunc)
sumstats
mean(sumstats$Sumsteps)
median(sumstats$Sumsteps)
statsfunc <- function(rawdata){
return(data.frame(
Sumsteps = sum(rawdata$steps, na.rm = TRUE)))
}
sumstats <- ddply(rawdata, .(date), statsfunc)
sumstats$date <- as.POSIXct(sumstats$date)
qplot(date, Sumsteps, data=sumstats, geom="histogram", stat="identity")
head(rawdata)
meantimefunc <- function(rawdata){
return(data.frame(
meanIntervalSteps = mean(rawdata$steps, na.rm=TRUE)
))
}
meantime <- ddply(rawdata, .(interval), meantimefunc)
head(meantimefunc())
head(meantime)
meantime[,130:140]
meantime[130:140,]
```{r}
meantimefunc <- function(rawdata){
return(data.frame(
meanIntervalSteps = mean(rawdata$steps, na.rm=TRUE)
))
}
meantime <- ddply(rawdata, .(interval), meantimefunc)
plot(meantime$interval, meantime$interval, type = "l")
plot(meantime$interval, meantime$meanIntervalSteps, type = "l")
meantime[order(meantime$meanIntervalSteps)]
meantime[order(,meantime$meanIntervalSteps)]
meantime[order(meantime$meanIntervalSteps,)]
meantime[order(meantime$meanIntervalSteps),]
meantime[order(meantime$meanIntervalSteps, decreasing = TRUE),]
head(meantime[order(meantime$meanIntervalSteps, decreasing = TRUE),])
weekdays(rawdata$date)
rawdata <- read.csv("activity.csv")
fulldata <- rawdata
fulldata$date <- as.POSIXct(fulldata$date)
```
##What is the mean total number of steps taken per day?
```{r}
statsfunc <- function(fulldata){
return(data.frame(
Sumsteps = sum(fulldata$steps, na.rm = TRUE)))
}
sumstats <- ddply(fulldata, .(date), statsfunc)
qplot(date, Sumsteps, data=sumstats, geom="histogram", stat="identity")
```
```{r}
mean(sumstats$Sumsteps)
```
```{r}
median(sumstats$Sumsteps)
```
##What is the average daily activity pattern?
```{r}
meantimefunc <- function(fulldata){
return(data.frame(
meanIntervalSteps = mean(fulldata$steps, na.rm=TRUE)
))
}
meantime <- ddply(fulldata, .(interval), meantimefunc)
plot(meantime$interval, meantime$meanIntervalSteps, type = "l")
```
```{r}
head(meantime[order(meantime$meanIntervalSteps, decreasing = TRUE),])
weekdays(fulldata$date)
weekdays
help("weekdays")
fulldata$day <- weekdays(fulldata$date)
head(fulldata)
fulldata$weekday <- if(fulldata$date == "Saturday" | "Sunday"){
fulldata$weekday = "Weekend"
}
fulldata$weekday <- if(fulldata$day == "Saturday" | "Sunday"){
fulldata$weekday = "Weekend"
}
class(fulldata$day)
fulldata$day <- as.factor(fulldata$day)
class(fulldata$day)
fulldata$weekday <- if(fulldata$day == "Saturday" | "Sunday"){
fulldata$weekday = "Weekend"
}
fulldata$day == "Saturday"
fulldata$day == "Saturday" | "Sunday"
fulldata$day == "Saturday" | fulldata$day == "Sunday"
fulldata$weekday <- if(fulldata$day == "Saturday" | fulldata$day == "Sunday"){
fulldata$weekday = "Weekend"
}
isWeekend <- fulldata$day == "Saturday" | fulldata$day == "Sunday"
head(isWeekend)
fulldata$weekday <- if(fulldata$day == "Saturday"){
fulldata$weekday = "Weekend"
}
head(fulldata)
weekdayfunc <- function(fulldata){
if(fulldata$day == "Saturday")
fulldata$weekday = "Weekend"
}
weekdaystats <- ddply(rawdata, weekdayfunc)
weekdayfunc <- function(fulldata){
if(fulldata$day == "Saturday"){
fulldata$weekday = "Weekend"}
}
weekdaystats <- ddply(rawdata, weekdayfunc)
fulldata$Week <- ifelse(fulldata$day == "Saturday" | fulldata$day == "Sunday","Weekend", "Weekday")
head(fulldata)
fulldata$day <- weekdays(fulldata$date)
fulldata$week <- ifelse(fulldata$day == "Saturday" | fulldata$day == "Sunday","Weekend", "Weekday")
head(fulldata)
rawdata <- read.csv("activity.csv")
fulldata <- rawdata
fulldata$date <- as.POSIXct(fulldata$date)
```
##What is the mean total number of steps taken per day?
```{r}
statsfunc <- function(fulldata){
return(data.frame(
Sumsteps = sum(fulldata$steps, na.rm = TRUE)))
}
sumstats <- ddply(fulldata, .(date), statsfunc)
qplot(date, Sumsteps, data=sumstats, geom="histogram", stat="identity")
```
```{r}
mean(sumstats$Sumsteps)
```
```{r}
median(sumstats$Sumsteps)
```
##What is the average daily activity pattern?
```{r}
meantimefunc <- function(fulldata){
return(data.frame(
meanIntervalSteps = mean(fulldata$steps, na.rm=TRUE)
))
}
meantime <- ddply(fulldata, .(interval), meantimefunc)
plot(meantime$interval, meantime$meanIntervalSteps, type = "l")
```
```{r}
head(meantime[order(meantime$meanIntervalSteps, decreasing = TRUE),])
```
##Are there differences in activity patterns between weekdays and weekends?
```{r}
fulldata$day <- weekdays(fulldata$date)
fulldata$week <- ifelse(fulldata$day == "Saturday" | fulldata$day == "Sunday","Weekend", "Weekday")
